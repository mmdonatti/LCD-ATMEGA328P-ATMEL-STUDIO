
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000604  00000698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000604  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080011c  0080011c  000006b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001983  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a0  00000000  00000000  0000217f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a3e  00000000  00000000  0000291f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00003360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d9  00000000  00000000  00003544  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c24  00000000  00000000  00003a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004641  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 83 02 	call	0x506	; 0x506 <main>
  9e:	0c 94 00 03 	jmp	0x600	; 0x600 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <pinChange>:
	Lcd8_Cmd(0x1C);
}

void Lcd8_Shift_Left()
{
	Lcd8_Cmd(0x18);
  a6:	67 2b       	or	r22, r23
  a8:	09 f0       	breq	.+2      	; 0xac <pinChange+0x6>
  aa:	73 c0       	rjmp	.+230    	; 0x192 <pinChange+0xec>
  ac:	8a 30       	cpi	r24, 0x0A	; 10
  ae:	91 05       	cpc	r25, r1
  b0:	11 f4       	brne	.+4      	; 0xb6 <pinChange+0x10>
  b2:	28 98       	cbi	0x05, 0	; 5
  b4:	08 95       	ret
  b6:	8b 30       	cpi	r24, 0x0B	; 11
  b8:	91 05       	cpc	r25, r1
  ba:	11 f4       	brne	.+4      	; 0xc0 <pinChange+0x1a>
  bc:	29 98       	cbi	0x05, 1	; 5
  be:	08 95       	ret
  c0:	8c 30       	cpi	r24, 0x0C	; 12
  c2:	91 05       	cpc	r25, r1
  c4:	11 f4       	brne	.+4      	; 0xca <pinChange+0x24>
  c6:	2a 98       	cbi	0x05, 2	; 5
  c8:	08 95       	ret
  ca:	8d 30       	cpi	r24, 0x0D	; 13
  cc:	91 05       	cpc	r25, r1
  ce:	11 f4       	brne	.+4      	; 0xd4 <pinChange+0x2e>
  d0:	2b 98       	cbi	0x05, 3	; 5
  d2:	08 95       	ret
  d4:	8e 30       	cpi	r24, 0x0E	; 14
  d6:	91 05       	cpc	r25, r1
  d8:	11 f4       	brne	.+4      	; 0xde <pinChange+0x38>
  da:	2c 98       	cbi	0x05, 4	; 5
  dc:	08 95       	ret
  de:	8f 30       	cpi	r24, 0x0F	; 15
  e0:	91 05       	cpc	r25, r1
  e2:	11 f4       	brne	.+4      	; 0xe8 <pinChange+0x42>
  e4:	2d 98       	cbi	0x05, 5	; 5
  e6:	08 95       	ret
  e8:	80 31       	cpi	r24, 0x10	; 16
  ea:	91 05       	cpc	r25, r1
  ec:	11 f4       	brne	.+4      	; 0xf2 <pinChange+0x4c>
  ee:	2e 98       	cbi	0x05, 6	; 5
  f0:	08 95       	ret
  f2:	81 31       	cpi	r24, 0x11	; 17
  f4:	91 05       	cpc	r25, r1
  f6:	11 f4       	brne	.+4      	; 0xfc <pinChange+0x56>
  f8:	2f 98       	cbi	0x05, 7	; 5
  fa:	08 95       	ret
  fc:	84 31       	cpi	r24, 0x14	; 20
  fe:	91 05       	cpc	r25, r1
 100:	11 f4       	brne	.+4      	; 0x106 <pinChange+0x60>
 102:	40 98       	cbi	0x08, 0	; 8
 104:	08 95       	ret
 106:	85 31       	cpi	r24, 0x15	; 21
 108:	91 05       	cpc	r25, r1
 10a:	11 f4       	brne	.+4      	; 0x110 <pinChange+0x6a>
 10c:	41 98       	cbi	0x08, 1	; 8
 10e:	08 95       	ret
 110:	86 31       	cpi	r24, 0x16	; 22
 112:	91 05       	cpc	r25, r1
 114:	11 f4       	brne	.+4      	; 0x11a <pinChange+0x74>
 116:	42 98       	cbi	0x08, 2	; 8
 118:	08 95       	ret
 11a:	87 31       	cpi	r24, 0x17	; 23
 11c:	91 05       	cpc	r25, r1
 11e:	11 f4       	brne	.+4      	; 0x124 <pinChange+0x7e>
 120:	43 98       	cbi	0x08, 3	; 8
 122:	08 95       	ret
 124:	88 31       	cpi	r24, 0x18	; 24
 126:	91 05       	cpc	r25, r1
 128:	11 f4       	brne	.+4      	; 0x12e <pinChange+0x88>
 12a:	44 98       	cbi	0x08, 4	; 8
 12c:	08 95       	ret
 12e:	89 31       	cpi	r24, 0x19	; 25
 130:	91 05       	cpc	r25, r1
 132:	11 f4       	brne	.+4      	; 0x138 <pinChange+0x92>
 134:	45 98       	cbi	0x08, 5	; 8
 136:	08 95       	ret
 138:	8a 31       	cpi	r24, 0x1A	; 26
 13a:	91 05       	cpc	r25, r1
 13c:	11 f4       	brne	.+4      	; 0x142 <pinChange+0x9c>
 13e:	46 98       	cbi	0x08, 6	; 8
 140:	08 95       	ret
 142:	8e 31       	cpi	r24, 0x1E	; 30
 144:	91 05       	cpc	r25, r1
 146:	11 f4       	brne	.+4      	; 0x14c <pinChange+0xa6>
 148:	58 98       	cbi	0x0b, 0	; 11
 14a:	08 95       	ret
 14c:	8f 31       	cpi	r24, 0x1F	; 31
 14e:	91 05       	cpc	r25, r1
 150:	11 f4       	brne	.+4      	; 0x156 <pinChange+0xb0>
 152:	59 98       	cbi	0x0b, 1	; 11
 154:	08 95       	ret
 156:	80 32       	cpi	r24, 0x20	; 32
 158:	91 05       	cpc	r25, r1
 15a:	11 f4       	brne	.+4      	; 0x160 <pinChange+0xba>
 15c:	5a 98       	cbi	0x0b, 2	; 11
 15e:	08 95       	ret
 160:	81 32       	cpi	r24, 0x21	; 33
 162:	91 05       	cpc	r25, r1
 164:	11 f4       	brne	.+4      	; 0x16a <pinChange+0xc4>
 166:	5b 98       	cbi	0x0b, 3	; 11
 168:	08 95       	ret
 16a:	82 32       	cpi	r24, 0x22	; 34
 16c:	91 05       	cpc	r25, r1
 16e:	11 f4       	brne	.+4      	; 0x174 <pinChange+0xce>
 170:	5c 98       	cbi	0x0b, 4	; 11
 172:	08 95       	ret
 174:	83 32       	cpi	r24, 0x23	; 35
 176:	91 05       	cpc	r25, r1
 178:	11 f4       	brne	.+4      	; 0x17e <pinChange+0xd8>
 17a:	5d 98       	cbi	0x0b, 5	; 11
 17c:	08 95       	ret
 17e:	84 32       	cpi	r24, 0x24	; 36
 180:	91 05       	cpc	r25, r1
 182:	11 f4       	brne	.+4      	; 0x188 <pinChange+0xe2>
 184:	5e 98       	cbi	0x0b, 6	; 11
 186:	08 95       	ret
 188:	85 97       	sbiw	r24, 0x25	; 37
 18a:	09 f0       	breq	.+2      	; 0x18e <pinChange+0xe8>
 18c:	73 c0       	rjmp	.+230    	; 0x274 <pinChange+0x1ce>
 18e:	5f 98       	cbi	0x0b, 7	; 11
 190:	08 95       	ret
 192:	8a 30       	cpi	r24, 0x0A	; 10
 194:	91 05       	cpc	r25, r1
 196:	11 f4       	brne	.+4      	; 0x19c <pinChange+0xf6>
 198:	28 9a       	sbi	0x05, 0	; 5
 19a:	08 95       	ret
 19c:	8b 30       	cpi	r24, 0x0B	; 11
 19e:	91 05       	cpc	r25, r1
 1a0:	11 f4       	brne	.+4      	; 0x1a6 <pinChange+0x100>
 1a2:	29 9a       	sbi	0x05, 1	; 5
 1a4:	08 95       	ret
 1a6:	8c 30       	cpi	r24, 0x0C	; 12
 1a8:	91 05       	cpc	r25, r1
 1aa:	11 f4       	brne	.+4      	; 0x1b0 <pinChange+0x10a>
 1ac:	2a 9a       	sbi	0x05, 2	; 5
 1ae:	08 95       	ret
 1b0:	8d 30       	cpi	r24, 0x0D	; 13
 1b2:	91 05       	cpc	r25, r1
 1b4:	11 f4       	brne	.+4      	; 0x1ba <pinChange+0x114>
 1b6:	2b 9a       	sbi	0x05, 3	; 5
 1b8:	08 95       	ret
 1ba:	8e 30       	cpi	r24, 0x0E	; 14
 1bc:	91 05       	cpc	r25, r1
 1be:	11 f4       	brne	.+4      	; 0x1c4 <pinChange+0x11e>
 1c0:	2c 9a       	sbi	0x05, 4	; 5
 1c2:	08 95       	ret
 1c4:	8f 30       	cpi	r24, 0x0F	; 15
 1c6:	91 05       	cpc	r25, r1
 1c8:	11 f4       	brne	.+4      	; 0x1ce <pinChange+0x128>
 1ca:	2d 9a       	sbi	0x05, 5	; 5
 1cc:	08 95       	ret
 1ce:	80 31       	cpi	r24, 0x10	; 16
 1d0:	91 05       	cpc	r25, r1
 1d2:	11 f4       	brne	.+4      	; 0x1d8 <pinChange+0x132>
 1d4:	2e 9a       	sbi	0x05, 6	; 5
 1d6:	08 95       	ret
 1d8:	81 31       	cpi	r24, 0x11	; 17
 1da:	91 05       	cpc	r25, r1
 1dc:	11 f4       	brne	.+4      	; 0x1e2 <pinChange+0x13c>
 1de:	2f 9a       	sbi	0x05, 7	; 5
 1e0:	08 95       	ret
 1e2:	84 31       	cpi	r24, 0x14	; 20
 1e4:	91 05       	cpc	r25, r1
 1e6:	11 f4       	brne	.+4      	; 0x1ec <pinChange+0x146>
 1e8:	40 9a       	sbi	0x08, 0	; 8
 1ea:	08 95       	ret
 1ec:	85 31       	cpi	r24, 0x15	; 21
 1ee:	91 05       	cpc	r25, r1
 1f0:	11 f4       	brne	.+4      	; 0x1f6 <pinChange+0x150>
 1f2:	41 9a       	sbi	0x08, 1	; 8
 1f4:	08 95       	ret
 1f6:	86 31       	cpi	r24, 0x16	; 22
 1f8:	91 05       	cpc	r25, r1
 1fa:	11 f4       	brne	.+4      	; 0x200 <pinChange+0x15a>
 1fc:	42 9a       	sbi	0x08, 2	; 8
 1fe:	08 95       	ret
 200:	87 31       	cpi	r24, 0x17	; 23
 202:	91 05       	cpc	r25, r1
 204:	11 f4       	brne	.+4      	; 0x20a <pinChange+0x164>
 206:	43 9a       	sbi	0x08, 3	; 8
 208:	08 95       	ret
 20a:	88 31       	cpi	r24, 0x18	; 24
 20c:	91 05       	cpc	r25, r1
 20e:	11 f4       	brne	.+4      	; 0x214 <pinChange+0x16e>
 210:	44 9a       	sbi	0x08, 4	; 8
 212:	08 95       	ret
 214:	89 31       	cpi	r24, 0x19	; 25
 216:	91 05       	cpc	r25, r1
 218:	11 f4       	brne	.+4      	; 0x21e <pinChange+0x178>
 21a:	45 9a       	sbi	0x08, 5	; 8
 21c:	08 95       	ret
 21e:	8a 31       	cpi	r24, 0x1A	; 26
 220:	91 05       	cpc	r25, r1
 222:	11 f4       	brne	.+4      	; 0x228 <pinChange+0x182>
 224:	46 9a       	sbi	0x08, 6	; 8
 226:	08 95       	ret
 228:	8e 31       	cpi	r24, 0x1E	; 30
 22a:	91 05       	cpc	r25, r1
 22c:	11 f4       	brne	.+4      	; 0x232 <pinChange+0x18c>
 22e:	58 9a       	sbi	0x0b, 0	; 11
 230:	08 95       	ret
 232:	8f 31       	cpi	r24, 0x1F	; 31
 234:	91 05       	cpc	r25, r1
 236:	11 f4       	brne	.+4      	; 0x23c <pinChange+0x196>
 238:	59 9a       	sbi	0x0b, 1	; 11
 23a:	08 95       	ret
 23c:	80 32       	cpi	r24, 0x20	; 32
 23e:	91 05       	cpc	r25, r1
 240:	11 f4       	brne	.+4      	; 0x246 <pinChange+0x1a0>
 242:	5a 9a       	sbi	0x0b, 2	; 11
 244:	08 95       	ret
 246:	81 32       	cpi	r24, 0x21	; 33
 248:	91 05       	cpc	r25, r1
 24a:	11 f4       	brne	.+4      	; 0x250 <pinChange+0x1aa>
 24c:	5b 9a       	sbi	0x0b, 3	; 11
 24e:	08 95       	ret
 250:	82 32       	cpi	r24, 0x22	; 34
 252:	91 05       	cpc	r25, r1
 254:	11 f4       	brne	.+4      	; 0x25a <pinChange+0x1b4>
 256:	5c 9a       	sbi	0x0b, 4	; 11
 258:	08 95       	ret
 25a:	83 32       	cpi	r24, 0x23	; 35
 25c:	91 05       	cpc	r25, r1
 25e:	11 f4       	brne	.+4      	; 0x264 <pinChange+0x1be>
 260:	5d 9a       	sbi	0x0b, 5	; 11
 262:	08 95       	ret
 264:	84 32       	cpi	r24, 0x24	; 36
 266:	91 05       	cpc	r25, r1
 268:	11 f4       	brne	.+4      	; 0x26e <pinChange+0x1c8>
 26a:	5e 9a       	sbi	0x0b, 6	; 11
 26c:	08 95       	ret
 26e:	85 97       	sbiw	r24, 0x25	; 37
 270:	09 f4       	brne	.+2      	; 0x274 <pinChange+0x1ce>
 272:	5f 9a       	sbi	0x0b, 7	; 11
 274:	08 95       	ret

00000276 <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
 276:	cf 93       	push	r28
 278:	c8 2f       	mov	r28, r24
	if(a & 1)
 27a:	80 ff       	sbrs	r24, 0
 27c:	07 c0       	rjmp	.+14     	; 0x28c <Lcd4_Port+0x16>
	pinChange(D4,1);
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	82 e2       	ldi	r24, 0x22	; 34
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
 28a:	06 c0       	rjmp	.+12     	; 0x298 <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	82 e2       	ldi	r24, 0x22	; 34
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
	
	if(a & 2)
 298:	c1 ff       	sbrs	r28, 1
 29a:	07 c0       	rjmp	.+14     	; 0x2aa <Lcd4_Port+0x34>
	pinChange(D5,1);
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	83 e2       	ldi	r24, 0x23	; 35
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
 2a8:	06 c0       	rjmp	.+12     	; 0x2b6 <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	83 e2       	ldi	r24, 0x23	; 35
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
	
	if(a & 4)
 2b6:	c2 ff       	sbrs	r28, 2
 2b8:	07 c0       	rjmp	.+14     	; 0x2c8 <Lcd4_Port+0x52>
	pinChange(D6,1);
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	84 e2       	ldi	r24, 0x24	; 36
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
 2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	84 e2       	ldi	r24, 0x24	; 36
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
	
	if(a & 8)
 2d4:	c3 ff       	sbrs	r28, 3
 2d6:	07 c0       	rjmp	.+14     	; 0x2e6 <Lcd4_Port+0x70>
	pinChange(D7,1);
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	85 e2       	ldi	r24, 0x25	; 37
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
 2e4:	06 c0       	rjmp	.+12     	; 0x2f2 <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	85 e2       	ldi	r24, 0x25	; 37
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
}
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
 2f6:	cf 93       	push	r28
 2f8:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	8a e0       	ldi	r24, 0x0A	; 10
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
	Lcd4_Port(a);
 306:	8c 2f       	mov	r24, r28
 308:	0e 94 3b 01 	call	0x276	; 0x276 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	8b e0       	ldi	r24, 0x0B	; 11
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 318:	8f e9       	ldi	r24, 0x9F	; 159
 31a:	9f e0       	ldi	r25, 0x0F	; 15
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <Lcd4_Cmd+0x26>
 320:	00 c0       	rjmp	.+0      	; 0x322 <Lcd4_Cmd+0x2c>
 322:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	8b e0       	ldi	r24, 0x0B	; 11
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
 330:	8f e9       	ldi	r24, 0x9F	; 159
 332:	9f e0       	ldi	r25, 0x0F	; 15
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <Lcd4_Cmd+0x3e>
 338:	00 c0       	rjmp	.+0      	; 0x33a <Lcd4_Cmd+0x44>
 33a:	00 00       	nop
	_delay_ms(1);
}
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
	Lcd4_Cmd(1);
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
 34c:	08 95       	ret

0000034e <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
 34e:	cf 93       	push	r28
 350:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 1)
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	59 f4       	brne	.+22     	; 0x36c <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
 356:	80 e8       	ldi	r24, 0x80	; 128
 358:	86 0f       	add	r24, r22
 35a:	82 95       	swap	r24
 35c:	8f 70       	andi	r24, 0x0F	; 15
 35e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
		Lcd4_Cmd(y);
 362:	8c 2f       	mov	r24, r28
 364:	8f 70       	andi	r24, 0x0F	; 15
 366:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
 36a:	0c c0       	rjmp	.+24     	; 0x384 <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 2)
 36c:	82 30       	cpi	r24, 0x02	; 2
 36e:	51 f4       	brne	.+20     	; 0x384 <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
 370:	80 ec       	ldi	r24, 0xC0	; 192
 372:	86 0f       	add	r24, r22
 374:	82 95       	swap	r24
 376:	8f 70       	andi	r24, 0x0F	; 15
 378:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
		Lcd4_Cmd(y);
 37c:	8c 2f       	mov	r24, r28
 37e:	8f 70       	andi	r24, 0x0F	; 15
 380:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
	}
}
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 3b 01 	call	0x276	; 0x276 <Lcd4_Port>
 38e:	2f ef       	ldi	r18, 0xFF	; 255
 390:	89 ef       	ldi	r24, 0xF9	; 249
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	21 50       	subi	r18, 0x01	; 1
 396:	80 40       	sbci	r24, 0x00	; 0
 398:	90 40       	sbci	r25, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <Lcd4_Init+0xc>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <Lcd4_Init+0x16>
 39e:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
 3a0:	83 e0       	ldi	r24, 0x03	; 3
 3a2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
 3a6:	8f e1       	ldi	r24, 0x1F	; 31
 3a8:	9e e4       	ldi	r25, 0x4E	; 78
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <Lcd4_Init+0x22>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <Lcd4_Init+0x28>
 3b0:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
 3b2:	83 e0       	ldi	r24, 0x03	; 3
 3b4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
 3b8:	8f ed       	ldi	r24, 0xDF	; 223
 3ba:	9b ea       	ldi	r25, 0xAB	; 171
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <Lcd4_Init+0x34>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <Lcd4_Init+0x3a>
 3c2:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
 3c4:	83 e0       	ldi	r24, 0x03	; 3
 3c6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 3d6:	88 e0       	ldi	r24, 0x08	; 8
 3d8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 3e2:	8c e0       	ldi	r24, 0x0C	; 12
 3e4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
 3ee:	86 e0       	ldi	r24, 0x06	; 6
 3f0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
 3f4:	08 95       	ret

000003f6 <Lcd4_Write_Char>:
}

void Lcd4_Write_Char(char a)
{
 3f6:	cf 93       	push	r28
 3f8:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	8a e0       	ldi	r24, 0x0A	; 10
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
 406:	8c 2f       	mov	r24, r28
 408:	82 95       	swap	r24
 40a:	8f 70       	andi	r24, 0x0F	; 15
 40c:	0e 94 3b 01 	call	0x276	; 0x276 <Lcd4_Port>
	pinChange(EN,1);
 410:	61 e0       	ldi	r22, 0x01	; 1
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	8b e0       	ldi	r24, 0x0B	; 11
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
 41c:	8f e9       	ldi	r24, 0x9F	; 159
 41e:	9f e0       	ldi	r25, 0x0F	; 15
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 426:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	8b e0       	ldi	r24, 0x0B	; 11
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
 434:	8f e9       	ldi	r24, 0x9F	; 159
 436:	9f e0       	ldi	r25, 0x0F	; 15
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
 440:	8c 2f       	mov	r24, r28
 442:	8f 70       	andi	r24, 0x0F	; 15
 444:	0e 94 3b 01 	call	0x276	; 0x276 <Lcd4_Port>
	pinChange(EN,1);
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	8b e0       	ldi	r24, 0x0B	; 11
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
 454:	8f e9       	ldi	r24, 0x9F	; 159
 456:	9f e0       	ldi	r25, 0x0F	; 15
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45e:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	8b e0       	ldi	r24, 0x0B	; 11
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
 46c:	8f e9       	ldi	r24, 0x9F	; 159
 46e:	9f e0       	ldi	r25, 0x0F	; 15
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 474:	00 c0       	rjmp	.+0      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 476:	00 00       	nop
	_delay_ms(1);
}
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
 482:	88 81       	ld	r24, Y
 484:	88 23       	and	r24, r24
 486:	31 f0       	breq	.+12     	; 0x494 <Lcd4_Write_String+0x18>
 488:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
 48a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 48e:	89 91       	ld	r24, Y+
 490:	81 11       	cpse	r24, r1
 492:	fb cf       	rjmp	.-10     	; 0x48a <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <Lcd4_Shift_Right>:

void Lcd4_Shift_Right()
{
	Lcd4_Cmd(0x01);
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 4a0:	8c e0       	ldi	r24, 0x0C	; 12
 4a2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
 4a6:	08 95       	ret

000004a8 <Lcd4_Shift_Left>:
}

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 4ae:	88 e0       	ldi	r24, 0x08	; 8
 4b0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Lcd4_Cmd>
 4b4:	08 95       	ret

000004b6 <Backlight_off>:

int i;

void Backlight_off()
{
	pinChange(BR,0);
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	8c e0       	ldi	r24, 0x0C	; 12
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
	pinChange(BG,0);
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	8d e0       	ldi	r24, 0x0D	; 13
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
	pinChange(BB,0);
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	8e e0       	ldi	r24, 0x0E	; 14
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
 4da:	08 95       	ret

000004dc <Backlight_red>:
}

void Backlight_red()
{
	pinChange(BR,1);
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	8c e0       	ldi	r24, 0x0C	; 12
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
 4e8:	08 95       	ret

000004ea <Backlight_green>:
}

void Backlight_green()
{
	pinChange(BG,1);
 4ea:	61 e0       	ldi	r22, 0x01	; 1
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	8d e0       	ldi	r24, 0x0D	; 13
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
 4f6:	08 95       	ret

000004f8 <Backlight_blue>:
}

void Backlight_blue()
{
	pinChange(BB,1);	
 4f8:	61 e0       	ldi	r22, 0x01	; 1
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	8e e0       	ldi	r24, 0x0E	; 14
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 53 00 	call	0xa6	; 0xa6 <pinChange>
 504:	08 95       	ret

00000506 <main>:
}

int main(void)
{
	DDRD = 0xF0;
 506:	80 ef       	ldi	r24, 0xF0	; 240
 508:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
 50a:	8f ef       	ldi	r24, 0xFF	; 255
 50c:	84 b9       	out	0x04, r24	; 4
	Backlight_off();
 50e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <Backlight_off>

	Lcd4_Init();
 512:	0e 94 c4 01 	call	0x388	; 0x388 <Lcd4_Init>
	Backlight_red();
 516:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Backlight_red>
 51a:	2f ef       	ldi	r18, 0xFF	; 255
 51c:	83 ed       	ldi	r24, 0xD3	; 211
 51e:	90 e3       	ldi	r25, 0x30	; 48
 520:	21 50       	subi	r18, 0x01	; 1
 522:	80 40       	sbci	r24, 0x00	; 0
 524:	90 40       	sbci	r25, 0x00	; 0
 526:	e1 f7       	brne	.-8      	; 0x520 <main+0x1a>
 528:	00 c0       	rjmp	.+0      	; 0x52a <main+0x24>
 52a:	00 00       	nop
	_delay_ms(1000);
	Backlight_green();
 52c:	0e 94 75 02 	call	0x4ea	; 0x4ea <Backlight_green>
 530:	2f ef       	ldi	r18, 0xFF	; 255
 532:	83 ed       	ldi	r24, 0xD3	; 211
 534:	90 e3       	ldi	r25, 0x30	; 48
 536:	21 50       	subi	r18, 0x01	; 1
 538:	80 40       	sbci	r24, 0x00	; 0
 53a:	90 40       	sbci	r25, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <main+0x30>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <main+0x3a>
 540:	00 00       	nop
	_delay_ms(1000);
	Backlight_blue();
 542:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Backlight_blue>
 546:	2f ef       	ldi	r18, 0xFF	; 255
 548:	83 ed       	ldi	r24, 0xD3	; 211
 54a:	90 e3       	ldi	r25, 0x30	; 48
 54c:	21 50       	subi	r18, 0x01	; 1
 54e:	80 40       	sbci	r24, 0x00	; 0
 550:	90 40       	sbci	r25, 0x00	; 0
 552:	e1 f7       	brne	.-8      	; 0x54c <main+0x46>
 554:	00 c0       	rjmp	.+0      	; 0x556 <main+0x50>
 556:	00 00       	nop
	_delay_ms(1000);
	
	while(1)
	{
		Lcd4_Set_Cursor(1,1);
 558:	61 e0       	ldi	r22, 0x01	; 1
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
		Lcd4_Write_String("electroSome LCD Hello World");
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	91 e0       	ldi	r25, 0x01	; 1
 564:	0e 94 3e 02 	call	0x47c	; 0x47c <Lcd4_Write_String>
		for(i=0;i<15;i++)
 568:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>
 56c:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
 570:	2f ef       	ldi	r18, 0xFF	; 255
 572:	89 e6       	ldi	r24, 0x69	; 105
 574:	98 e1       	ldi	r25, 0x18	; 24
 576:	21 50       	subi	r18, 0x01	; 1
 578:	80 40       	sbci	r24, 0x00	; 0
 57a:	90 40       	sbci	r25, 0x00	; 0
 57c:	e1 f7       	brne	.-8      	; 0x576 <main+0x70>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <main+0x7a>
 580:	00 00       	nop
		{
			_delay_ms(500);
			Lcd4_Shift_Left();
 582:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Lcd4_Shift_Left>
	
	while(1)
	{
		Lcd4_Set_Cursor(1,1);
		Lcd4_Write_String("electroSome LCD Hello World");
		for(i=0;i<15;i++)
 586:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 58a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 594:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
 598:	0f 97       	sbiw	r24, 0x0f	; 15
 59a:	54 f3       	brlt	.-44     	; 0x570 <main+0x6a>
 59c:	2c c0       	rjmp	.+88     	; 0x5f6 <main+0xf0>
 59e:	2f ef       	ldi	r18, 0xFF	; 255
 5a0:	89 e6       	ldi	r24, 0x69	; 105
 5a2:	98 e1       	ldi	r25, 0x18	; 24
 5a4:	21 50       	subi	r18, 0x01	; 1
 5a6:	80 40       	sbci	r24, 0x00	; 0
 5a8:	90 40       	sbci	r25, 0x00	; 0
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <main+0x9e>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <main+0xa8>
 5ae:	00 00       	nop
			Lcd4_Shift_Left();
		}
		for(i=0;i<15;i++)
		{
			_delay_ms(500);
			Lcd4_Shift_Right();
 5b0:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd4_Shift_Right>
		for(i=0;i<15;i++)
		{
			_delay_ms(500);
			Lcd4_Shift_Left();
		}
		for(i=0;i<15;i++)
 5b4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 5b8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 5bc:	01 96       	adiw	r24, 0x01	; 1
 5be:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 5c2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
 5c6:	0f 97       	sbiw	r24, 0x0f	; 15
 5c8:	54 f3       	brlt	.-44     	; 0x59e <main+0x98>
		{
			_delay_ms(500);
			Lcd4_Shift_Right();
		}
		Lcd4_Clear();
 5ca:	0e 94 a0 01 	call	0x340	; 0x340 <Lcd4_Clear>
		Lcd4_Set_Cursor(2,1);
 5ce:	61 e0       	ldi	r22, 0x01	; 1
 5d0:	82 e0       	ldi	r24, 0x02	; 2
 5d2:	0e 94 a7 01 	call	0x34e	; 0x34e <Lcd4_Set_Cursor>
		Lcd4_Write_Char('e');
 5d6:	85 e6       	ldi	r24, 0x65	; 101
 5d8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Write_Char>
		Lcd4_Write_Char('S');
 5dc:	83 e5       	ldi	r24, 0x53	; 83
 5de:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Write_Char>
 5e2:	2f ef       	ldi	r18, 0xFF	; 255
 5e4:	87 ea       	ldi	r24, 0xA7	; 167
 5e6:	91 e6       	ldi	r25, 0x61	; 97
 5e8:	21 50       	subi	r18, 0x01	; 1
 5ea:	80 40       	sbci	r24, 0x00	; 0
 5ec:	90 40       	sbci	r25, 0x00	; 0
 5ee:	e1 f7       	brne	.-8      	; 0x5e8 <main+0xe2>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <main+0xec>
 5f2:	00 00       	nop
 5f4:	b1 cf       	rjmp	.-158    	; 0x558 <main+0x52>
		for(i=0;i<15;i++)
		{
			_delay_ms(500);
			Lcd4_Shift_Left();
		}
		for(i=0;i<15;i++)
 5f6:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>
 5fa:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
 5fe:	cf cf       	rjmp	.-98     	; 0x59e <main+0x98>

00000600 <_exit>:
 600:	f8 94       	cli

00000602 <__stop_program>:
 602:	ff cf       	rjmp	.-2      	; 0x602 <__stop_program>
